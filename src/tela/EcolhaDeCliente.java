/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import com.mysql.jdbc.exceptions.jdbc4.CommunicationsException;
import com.sun.javafx.scene.control.skin.VirtualFlow;
import com.sun.xml.internal.org.jvnet.mimepull.CleanUpExecutorFactory;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.QueryTimeoutException;
import javax.persistence.TypedQuery;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import medelos.Cliente;
import medelos.Conexao;
import medelos.Factory;
import medelos.Pedido;
import medelos.PedidoProduto;
import medelos.Produto;
import modellosUteis.PedidoCompleto;
import org.eclipse.persistence.exceptions.CommunicationException;
import org.eclipse.persistence.exceptions.DatabaseException;
import org.eclipse.persistence.exceptions.PersistenceUnitLoadingException;
import org.eclipse.persistence.exceptions.TransactionException;
import org.omg.CORBA.COMM_FAILURE;

/**
 *
 * @author Pedro Henrique Gomes
 */
public class EcolhaDeCliente extends javax.swing.JInternalFrame {
 Connection  con= null;
    List<PedidoCompleto> ListaP;

    /**
     * Creates new form EcolhaDeCliente
     */
    public EcolhaDeCliente(  ) throws SQLException, ClassNotFoundException {
        
        con =  Conexao.conecta();
        
        
        initComponents();
        jScrollPane1.getViewport().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtfPesquisarNomeCliente = new javax.swing.JTextField();
        jtfCodigo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 0, 51));
        setClosable(true);
        setForeground(new java.awt.Color(255, 51, 0));
        setOpaque(true);

        jCheckBox1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 15)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox1.setText("Cliente nÃ£o especificado");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nome do cliente", "Cpf/Cnpj"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(37);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Pesquisa por nome do cliente:");

        jtfPesquisarNomeCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 15)); // NOI18N
        jtfPesquisarNomeCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfPesquisarNomeClienteKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisarNomeClienteKeyReleased(evt);
            }
        });

        jtfCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfCodigoActionPerformed(evt);
            }
        });
        jtfCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodigoKeyPressed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 15)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_search_16px.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel1)
                            .addComponent(jtfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtfPesquisarNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfPesquisarNomeCliente)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        setBounds(250, 20, 616, 405);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfPesquisarNomeClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisarNomeClienteKeyReleased


    }//GEN-LAST:event_jtfPesquisarNomeClienteKeyReleased

    private void jtfPesquisarNomeClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisarNomeClienteKeyPressed
        
             if(evt.getKeyCode()== KeyEvent.VK_ENTER){
                 c(jtfPesquisarNomeCliente.getText());
                 
             }



// TODO add your handling code here:
       /* Factory fac = new Factory();
                EntityManager jpa = fac.retornaEntidadegerenciada();
        List<Cliente> list1 = new ArrayList<>();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String texto = jtfPesquisarNomeCliente.getText();
            
            /*try{

            
               PreparedStatement stm = con.prepareStatement("Select * "
                                    + "from clientes c "
                                    + "where c.nome_cliente LIKE '" + texto + "%'");
                ResultSet rs= stm.executeQuery();
                while (rs.next()) {
                    Cliente cliente = new Cliente();
                        cliente.setId_cliente(rs.getInt("id_cliente"));
                        cliente.setNome_cliente(rs.getString("nome_cliente"));
                        cliente.setCpf_cliente(rs.getString("cpf_cliente"));
                        
                        list1.add(cliente);
                }
                
               JOptionPane.showMessageDialog(null, list1.size());
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, "Nao foi possivel Conectar ao oracle");
            }*/
           /* try {

                

                if (jpa.isOpen()== false) {
                    JOptionPane.showMessageDialog(null, jpa);

                } else {
                    Query query1 = jpa.
                            createQuery("Select c "
                                    + "from Cliente c "
                                    + "where c.nome_cliente LIKE '" + texto + "%'");
                    list1 = (List<Cliente>) query1.getResultList();
                }
            } catch (DatabaseException e) {
                jpa.close();
                JOptionPane.showMessageDialog(null, "Nao foi Possivel coonectar Ao Servidor 1");
                

            }
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setNumRows(0);
            if (jtfPesquisarNomeCliente.getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "nulo");
            } else {
                for (Cliente c : list1) {
                    dtm.addRow(new Object[]{
                        c.getId_cliente(),
                        c.getNome_cliente(),
                        c.getCpf_cliente()

                    });
                }

            }

            
        } */


    }//GEN-LAST:event_jtfPesquisarNomeClienteKeyPressed

    private void jtfCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfCodigoActionPerformed

    private void jtfCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            int codigo = Integer.parseInt(jtfCodigo.getText());

            Factory fac = new Factory();
            EntityManager jpa = fac.retornaEntidadegerenciada();
            try {
                String q = "SELECT  p.* from produto p "
                        + " inner join pedidoproduto pp "
                        + "inner join pedido ped on ped.id_pedido =  pp.pedido_id "
                        + " where ped.id_pedido= ?";
                List<Produto> produtos = jpa.createNativeQuery(q, Produto.class)
                        .setParameter(1, codigo).getResultList();

                List<PedidoCompleto> pedidos = null;

                String q2 = "SELECT  pp.ID_PEDIDO_PRDOUTO, pp.quantidade_pedido_produto from produto p "
                        + " inner join pedidoproduto pp "
                        + "inner join pedido ped on ped.id_pedido =  pp.pedido_id "
                        + " where ped.id_pedido= ?";
                List<PedidoProduto> pedidosProdutos = jpa.createNativeQuery(q2, PedidoProduto.class)
                        .setParameter(1, codigo).getResultList();
                System.out.println(produtos.size());
                System.out.println(pedidosProdutos.size());

                ArrayList<PedidoCompleto> lista = new ArrayList<>();

                for (int i = 0; i < produtos.size(); i++) {
                    PedidoCompleto pedido = new PedidoCompleto();
                    //System.out.println(pedidosProdutos.get(i).getQuantidade_pedido_produto());
                    pedido.setProduto(produtos.get(i));
                    pedido.setPp(pedidosProdutos.get(i));
                    lista.add(pedido);

                }
                System.out.println("Descritivo         qtd ");
                for (int i = 0; i < lista.size(); i++) {

                    System.out.println(lista.get(i).getProduto().getDescricao_produto() + "         - " + lista.get(i).getPp().getQuantidade_pedido_produto());
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "Pedido nao encontrado");
            }
//               produto= ((Produto) arr[0]);
//               PedidoProduto pediProduto = new PedidoProduto();
//               pediProduto = ((PedidoProduto) arr[1]);
//               PedidoCompleto ps= new PedidoCompleto();
//               ps.setProduto(produto);
//               ps.setPp(pediProduto);
//               
//               ListaP.add(ps);
        }
    }//GEN-LAST:event_jtfCodigoKeyPressed

  public void  c(String texto){
    
           List<Cliente> list1 = new ArrayList<>();
            
            try{

            
               PreparedStatement stm = con.prepareStatement("Select * "
                                    + "from clientes c "
                                    + "where c.nome_cliente LIKE '" + texto + "%'");
                ResultSet rs= stm.executeQuery();
                while (rs.next()) {
                    Cliente cliente = new Cliente();
                        cliente.setId_cliente(rs.getInt("id_cliente"));
                        cliente.setNome_cliente(rs.getString("nome_cliente"));
                        cliente.setCpf_cliente(rs.getString("cpf_cliente"));
                        
                        list1.add(cliente);
                }
                
               JOptionPane.showMessageDialog(null, list1.size());
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, "Nao foi possivel Conectar ao oracle");
            }
          
                

               
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jtfCodigo;
    private javax.swing.JTextField jtfPesquisarNomeCliente;
    // End of variables declaration//GEN-END:variables
}
